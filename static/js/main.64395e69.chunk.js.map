{"version":3,"sources":["Home.js","Footer.js","Help.js","About.js","AppNav.js","index.js"],"names":["Home","props","xCellCount","yCellCount","useState","cells","setCells","isLoading","setIsLoading","isRunning","setIsRunning","isColor","setIsColor","delay","setDelay","iteration","setIteration","isRandom","setIsRandom","currentSlot","setCurrentSlot","zeroArray","Array","fill","map","localSaveData","a","slot","filename","window","localStorage","setItem","JSON","stringify","saveLocalBoard","localLoadData","data","parse","getItem","getLocalBoard","randomArray","newBoard","y","row","x","Math","random","push","getRandomBoard","isAlive","col","neighbors","calcNextGen","nextGenCells","length","useEffect","timer","setTimeout","clearTimeout","className","tblBoard","key","classes","count","onClick","newCell","console","log","prevCells","handleCellClick","makeTable","getClearBoard","Footer","Help","About","id","href","AppNav","activeClassName","to","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64395e69.chunk.js","sourcesContent":["// home.js by John Phillips on 2021-04-17 revised 2021-04-18\r\n// This implements John Conway's Game of Life rules.\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n// ***** Main function *******************************************************\r\nexport default function Home(props) {\r\n  let { xCellCount = 90, yCellCount = 50 } = props; // size of cells array\r\n  let [cells, setCells] = useState([]); // 2d cells array\r\n  const [isLoading, setIsLoading] = useState(false); // is page loading\r\n  const [isRunning, setIsRunning] = useState(true); // is simulation running\r\n  const [isColor, setIsColor] = useState(true); // colors or b/w\r\n  const [delay, setDelay] = useState(1000); // amount of delay for redraws\r\n  const [iteration, setIteration] = useState(0); // current iteration of sim\r\n  const [isRandom, setIsRandom] = useState(true);\r\n  const [currentSlot, setCurrentSlot] = useState(0);\r\n  const zeroArray = new Array(yCellCount) // 2d array filled with zeros\r\n    .fill(0)\r\n    .map(() => new Array(xCellCount).fill(0));\r\n\r\n  // Create a random array of cells when the app is started.\r\n  useEffect(() => {\r\n    getRandomBoard();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []); // ignore warning - empty dependency array [] so only executed once\r\n\r\n  // Automatically calculates the next generation in delay milliseconds.\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const timer = setTimeout(() => calcNextGen(), delay);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  });\r\n\r\n  // Restarts the simulation after 300 iterations.\r\n  useEffect(() => {\r\n    if (iteration >= 100) {\r\n      isRandom ? getRandomBoard() : getLocalBoard(currentSlot);\r\n    }\r\n  });\r\n\r\n  // Save current array to local storage.\r\n  async function localSaveData(slot = 0) {\r\n    const filename = \"v1life\" + slot;\r\n    window.localStorage.setItem(filename, JSON.stringify(cells));\r\n  }\r\n\r\n  // Prepare to save array to local storage.\r\n  async function saveLocalBoard(slot = 0) {\r\n    setIsLoading(true);\r\n    await localSaveData(slot);\r\n    setIteration(0);\r\n    setIsRandom(false);\r\n    setCurrentSlot(slot);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  // Grab cell array data from the browser local storage. If none exist,\r\n  // then return a 100x100 array of 0. Currently, 3 save slots are supported.\r\n  async function localLoadData(slot = 0) {\r\n    const filename = \"v1life\" + slot;\r\n    const data = JSON.parse(window.localStorage.getItem(filename)) || zeroArray;\r\n    return data;\r\n  }\r\n\r\n  // Prepare to load the cell array with locally saved data.\r\n  async function getLocalBoard(slot = 0) {\r\n    setIsLoading(true);\r\n    const data = await localLoadData(slot);\r\n    setCells(data);\r\n    setIteration(0);\r\n    setIsRandom(false);\r\n    setCurrentSlot(slot);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  async function randomArray() {\r\n    let newBoard = [];\r\n    for (let y = 0; y < yCellCount; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < xCellCount; x++) {\r\n        Math.random() < 0.25 ? row.push(1) : row.push(0);\r\n      }\r\n      newBoard.push(row);\r\n    }\r\n    for (let y = 0; y < yCellCount; y++) {\r\n      newBoard[y][0] = 0;\r\n      newBoard[y][xCellCount - 1] = 0;\r\n    }\r\n    for (let x = 0; x < xCellCount; x++) {\r\n      newBoard[0][x] = 0;\r\n      newBoard[yCellCount - 1][x] = 0;\r\n    }\r\n    return newBoard;\r\n  }\r\n\r\n  async function getRandomBoard() {\r\n    setIsLoading(true);\r\n    const data = await randomArray();\r\n    setCells(data);\r\n    setIteration(0);\r\n    setIsRandom(true);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  async function getClearBoard() {\r\n    setIsLoading(true);\r\n    setCells(zeroArray);\r\n    setIteration(0);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  // Apply Conway's rules to a single cell to determine its fate.\r\n  // 0 is dead and >= 1 is alive.\r\n  function isAlive(row, col) {\r\n    // count up the neighboring cells that are alive\r\n    let neighbors = 0;\r\n    if (row > 0 && row < yCellCount - 1 && col > 0 && col < xCellCount - 1) {\r\n      if (cells[row - 1][col - 1] >= 1) {\r\n        neighbors++;\r\n      }\r\n      if (cells[row - 1][col] >= 1) {\r\n        neighbors++;\r\n      }\r\n      if (cells[row - 1][col + 1] >= 1) {\r\n        neighbors++;\r\n      }\r\n      if (cells[row][col - 1] >= 1) {\r\n        neighbors++;\r\n      }\r\n      if (cells[row][col + 1] >= 1) {\r\n        neighbors++;\r\n      }\r\n      if (cells[row + 1][col - 1] >= 1) {\r\n        neighbors++;\r\n      }\r\n      if (cells[row + 1][col] >= 1) {\r\n        neighbors++;\r\n      }\r\n      if (cells[row + 1][col + 1] >= 1) {\r\n        neighbors++;\r\n      }\r\n      // apply the rules to this cell\r\n      if (cells[row][col] >= 1) {\r\n        if (neighbors < 2 || neighbors > 3) {\r\n          // this cell dies of loneliness or overcrowding\r\n          return 0;\r\n        } else {\r\n          // this cell continues to live and grow older\r\n          return cells[row][col] + 1;\r\n        }\r\n      } else if (neighbors === 3) {\r\n        // this cell was dead but now is born\r\n        return 1;\r\n      }\r\n    } else {\r\n      // this cell dies - all perimeter cells are kept dead\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // Loop through cells array and apply Conway's rules to each cell\r\n  function calcNextGen() {\r\n    const nextGenCells = [];\r\n    if (cells.length === yCellCount) {\r\n      for (let y = 0; y < yCellCount; y++) {\r\n        let row = [];\r\n        for (let x = 0; x < xCellCount; x++) {\r\n          row.push(isAlive(y, x));\r\n        }\r\n        nextGenCells.push(row);\r\n      }\r\n      setCells(nextGenCells);\r\n      setIteration(iteration + 1);\r\n    }\r\n  }\r\n\r\n  // When a cell is clicked, toggle on/off, then update cells array\r\n  function handleCellClick(y, x) {\r\n    const newCell = cells[y][x] > 0 ? 0 : 1;\r\n    console.log(\"cell=\", newCell);\r\n    setCells((prevCells) => {\r\n      const cells = [...prevCells];\r\n      cells[y] = [...cells[y]];\r\n      cells[y][x] = newCell;\r\n      return cells;\r\n    });\r\n  }\r\n\r\n  // Create a table to display the current state of the cells array\r\n  function makeTable() {\r\n    let tblBoard = [];\r\n    let key = 0;\r\n    // make sure the cells array is ready\r\n    if (cells.length === yCellCount) {\r\n      for (let y = 1; y < yCellCount - 1; y++) {\r\n        let row = [];\r\n        for (let x = 1; x < xCellCount - 1; x++) {\r\n          ++key;\r\n          // create a cell with the proper css background color\r\n          let classes = \"cell\";\r\n          const count = cells[y][x];\r\n          if (isColor && count < 7) {\r\n            classes += \" cell-\" + count;\r\n          } else if (isColor && count >= 7) {\r\n            classes += \" cell-7\";\r\n          } else if (count === 0) {\r\n            classes += \" cell-0\";\r\n          } else if (count >= 1) {\r\n            classes += \" cell-1\";\r\n          }\r\n          // add the clickable cell to the row array\r\n          row.push(\r\n            <td\r\n              key={key}\r\n              className={classes}\r\n              onClick={() => handleCellClick(y, x)}\r\n            />\r\n          );\r\n        }\r\n        // add the row to the table array\r\n        tblBoard.push(<tr key={y}>{row}</tr>);\r\n      }\r\n    }\r\n    return (\r\n      <table className=\"board\">\r\n        <tbody>{tblBoard}</tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"wrapper\">\r\n        {isLoading ? <div> Loading results...</div> : makeTable()}\r\n\r\n        <div className=\"life-controls\">\r\n          <button\r\n            onClick={() =>\r\n              isRunning ? setIsRunning(false) : setIsRunning(true)\r\n            }\r\n          >\r\n            {isRunning ? \"Pause\" : \"Run\"}\r\n          </button>\r\n          <button onClick={() => calcNextGen()}>Next</button>\r\n          <button\r\n            onClick={() => (isColor ? setIsColor(false) : setIsColor(true))}\r\n          >\r\n            {isColor ? \"B/W\" : \"Color\"}\r\n          </button>\r\n          <button onClick={() => setDelay(4000)}>Slow</button>\r\n          <button onClick={() => setDelay(1000)}>Medium</button>\r\n          <button onClick={() => setDelay(200)}>Fast</button>\r\n          <button onClick={() => getClearBoard()}>Clear</button>\r\n          <button onClick={() => getRandomBoard()}>Random</button>\r\n          <button onClick={() => getLocalBoard(0)}>Load-0</button>\r\n          <button onClick={() => saveLocalBoard(0)}>Save-0</button>\r\n          <button onClick={() => getLocalBoard(1)}>Load-1</button>\r\n          <button onClick={() => saveLocalBoard(1)}>Save-1</button>\r\n          <button onClick={() => getLocalBoard(2)}>Load-2</button>\r\n          <button onClick={() => saveLocalBoard(2)}>Save-2</button>\r\n          <label>\r\n            Iteration: {iteration}, Slot:{\" \"}\r\n            {isRandom ? \"Random\" : currentSlot }\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n// ***** End Main function ***************************************************\r\n","export default function Footer() {\r\n  return (\r\n    <>\r\n      <footer>v1life by John Phillips 2021</footer>\r\n    </>\r\n  );\r\n}\r\n","import Footer from \"./Footer\";\r\nexport default function Help() {\r\n  return (\r\n    <>\r\n      <section>\r\n        <h3>Controls</h3>\r\n        <p>This app implements Conway's game of life rules.</p>\r\n        <p>\r\n          The control buttons are at the bottom of the screen. You may need to\r\n          scroll down to see them.\r\n        </p>\r\n        <p>\r\n          Pause [Run], Next - toggle between running and pausing the simulation;\r\n          when paused you can click the next button to move forward frame by\r\n          frame.\r\n        </p>\r\n        <p>\r\n          B/W [Color] - choose black and white or color cells. The color changes\r\n          based on how long the cell has been alive.\r\n        </p>\r\n        <p>\r\n          Slow, Medium, Fast - sets the simulation speed. Medium is about 1\r\n          frame per second.\r\n        </p>\r\n        <p>\r\n          Random, Clear - set a randome screen of cells or set all of the cells\r\n          to 0.\r\n        </p>\r\n        <p>\r\n          Load, Save - load and save the screens from/to 3 local storage slots.\r\n        </p>\r\n      </section>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n","import Footer from \"./Footer\";\r\nexport default function About() {\r\n  return (\r\n    <>\r\n      <section>\r\n        <h3 id=\"about\">About</h3>\r\n        <p>Conway's Game of Life by John Phillips on April 17, 2021.</p>\r\n        <p>\r\n          Source:{\" \"}\r\n          <a href=\"https://github.com/profphillips/life-v1\">\r\n            https://github.com/profphillips/life-v1\r\n          </a>\r\n        </p>\r\n        <p>\r\n          Live page:{\" \"}\r\n          <a href=\"https://profphillips.github.io/life-v1/\">\r\n            https://profphillips.github.io/life-v1/\r\n          </a>\r\n        </p>\r\n      </section>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n","// by John Phillips on 2021-04-17 revised 2021-04-17\r\n\r\n// This file contains the navbar and routing for the app.\r\n\r\nimport React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  NavLink,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport Help from \"./Help\";\r\nimport About from \"./About\";\r\nimport \"./AppNav.css\";\r\n\r\nexport default function AppNav() {\r\n  return (\r\n    <Router>\r\n      <ul className=\"navbar\">\r\n        <li className=\"nav-item\">\r\n          <NavLink className=\"nav-link\" activeClassName=\"nav-active\" to=\"/home\">\r\n            Home\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <NavLink className=\"nav-link\" activeClassName=\"nav-active\" to=\"/help\">\r\n            Help\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <NavLink\r\n            className=\"nav-link\"\r\n            activeClassName=\"nav-active\"\r\n            to=\"/about\"\r\n          >\r\n            About\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n      <Switch>\r\n        <Route exact path=\"/help\">\r\n          <Help />\r\n        </Route>\r\n        <Route exact path=\"/about\">\r\n          <About />\r\n        </Route>\r\n        <Route exact path=\"/home\">\r\n          <Home />\r\n        </Route>\r\n        <Route exact path=\"/life-v1\">\r\n          <Redirect to=\"/home\" />\r\n        </Route>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/home\" />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport AppNav from \"./AppNav\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppNav />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}