{"version":3,"sources":["Home.js","Footer.js","Config.js","Help.js","About.js","AppNav.js","index.js"],"names":["Home","props","xCellCount","yCellCount","useState","cells","setCells","isLoading","setIsLoading","isRunning","setIsRunning","isColor","setIsColor","delay","setDelay","iteration","setIteration","maxIterations","setMaxIterations","isRandom","setIsRandom","currentSlot","setCurrentSlot","zeroArray","Array","fill","map","localSaveData","a","slot","filename","window","localStorage","setItem","JSON","stringify","saveLocalBoard","localLoadData","data","parse","getItem","getLocalBoard","randomArray","newBoard","y","row","x","Math","random","push","getRandomBoard","isAlive","col","neighbors","calcNextGen","nextGenCells","length","useEffect","result","fetchMaxIterations","console","log","timer","setTimeout","clearTimeout","className","tblBoard","key","classes","count","onClick","newCell","prevCells","handleCellClick","makeTable","getClearBoard","Footer","Config","fetchLocalData","initialVal","value","setValue","e","target","useInputState","maxIt","handleChange","reset","j","id","onSubmit","iterations","preventDefault","name","type","placeholder","onChange","required","autoComplete","style","listStyleType","rows","cols","Help","About","href","AppNav","activeClassName","to","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.945d7e78.chunk.js","sourcesContent":["// home.js by John Phillips on 2021-04-17 revised 2021-04-18\r\n// This implements John Conway's Game of Life rules.\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n// ***** Main function *******************************************************\r\nexport default function Home(props) {\r\n  let { xCellCount = 90, yCellCount = 50 } = props; // size of cells array\r\n  let [cells, setCells] = useState([]); // 2d cells array\r\n  const [isLoading, setIsLoading] = useState(false); // is page loading\r\n  const [isRunning, setIsRunning] = useState(true); // is simulation running\r\n  const [isColor, setIsColor] = useState(true); // colors or b/w\r\n  const [delay, setDelay] = useState(1000); // amount of delay for redraws\r\n  const [iteration, setIteration] = useState(0); // current iteration of sim\r\n  const [maxIterations, setMaxIterations] = useState();\r\n  const [isRandom, setIsRandom] = useState(true);\r\n  const [currentSlot, setCurrentSlot] = useState(0);\r\n  const zeroArray = new Array(yCellCount) // 2d array filled with zeros\r\n    .fill(0)\r\n    .map(() => new Array(xCellCount).fill(0));\r\n\r\n  // Create a random array of cells when the app is started.\r\n  useEffect(() => {\r\n    getRandomBoard();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []); // ignore warning - empty dependency array [] so only executed once\r\n\r\n  useEffect(() => {\r\n    const fetchMaxIterations = async () => {\r\n      const filename = \"v1-life-max-iterations\";\r\n      const result =\r\n        (await JSON.parse(window.localStorage.getItem(filename))) || 100;\r\n      setMaxIterations(result);\r\n    };\r\n    fetchMaxIterations();\r\n    console.log(\"max=\", maxIterations);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  // Automatically calculates the next generation in delay milliseconds.\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const timer = setTimeout(() => calcNextGen(), delay);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  });\r\n\r\n  // Restarts the simulation after maxIterations.\r\n  useEffect(() => {\r\n    if (iteration >= maxIterations) {\r\n      isRandom ? getRandomBoard() : getLocalBoard(currentSlot);\r\n    }\r\n  });\r\n\r\n  // Save current array to local storage.\r\n  async function localSaveData(slot = 0) {\r\n    const filename = \"v1life\" + slot;\r\n    window.localStorage.setItem(filename, JSON.stringify(cells));\r\n  }\r\n\r\n  // Prepare to save array to local storage.\r\n  async function saveLocalBoard(slot = 0) {\r\n    setIsLoading(true);\r\n    await localSaveData(slot);\r\n    setIteration(0);\r\n    setIsRandom(false);\r\n    setCurrentSlot(slot);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  // Grab cell array data from the browser local storage. If none exist,\r\n  // then return a 100x100 array of 0. Currently, 3 save slots are supported.\r\n  async function localLoadData(slot = 0) {\r\n    const filename = \"v1life\" + slot;\r\n    const data = JSON.parse(window.localStorage.getItem(filename)) || zeroArray;\r\n    return data;\r\n  }\r\n\r\n  // Prepare to load the cell array with locally saved data.\r\n  async function getLocalBoard(slot = 0) {\r\n    setIsLoading(true);\r\n    const data = await localLoadData(slot);\r\n    setCells(data);\r\n    setIteration(0);\r\n    setIsRandom(false);\r\n    setCurrentSlot(slot);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  async function randomArray() {\r\n    let newBoard = [];\r\n    for (let y = 0; y < yCellCount; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < xCellCount; x++) {\r\n        Math.random() < 0.25 ? row.push(1) : row.push(0);\r\n      }\r\n      newBoard.push(row);\r\n    }\r\n    for (let y = 0; y < yCellCount; y++) {\r\n      newBoard[y][0] = 0;\r\n      newBoard[y][xCellCount - 1] = 0;\r\n    }\r\n    for (let x = 0; x < xCellCount; x++) {\r\n      newBoard[0][x] = 0;\r\n      newBoard[yCellCount - 1][x] = 0;\r\n    }\r\n    return newBoard;\r\n  }\r\n\r\n  async function getRandomBoard() {\r\n    setIsLoading(true);\r\n    const data = await randomArray();\r\n    setCells(data);\r\n    setIteration(0);\r\n    setIsRandom(true);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  async function getClearBoard() {\r\n    setIsLoading(true);\r\n    setCells(zeroArray);\r\n    setIteration(0);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  // Apply Conway's rules to a single cell to determine its fate.\r\n  // 0 is dead and >= 1 is alive.\r\n  function isAlive(row, col) {\r\n    // count up the neighboring cells that are alive\r\n    let neighbors = 0;\r\n    if (row > 0 && row < yCellCount - 1 && col > 0 && col < xCellCount - 1) {\r\n      if (cells[row - 1][col - 1] >= 1) {\r\n        neighbors++;\r\n      }\r\n      if (cells[row - 1][col] >= 1) {\r\n        neighbors++;\r\n      }\r\n      if (cells[row - 1][col + 1] >= 1) {\r\n        neighbors++;\r\n      }\r\n      if (cells[row][col - 1] >= 1) {\r\n        neighbors++;\r\n      }\r\n      if (cells[row][col + 1] >= 1) {\r\n        neighbors++;\r\n      }\r\n      if (cells[row + 1][col - 1] >= 1) {\r\n        neighbors++;\r\n      }\r\n      if (cells[row + 1][col] >= 1) {\r\n        neighbors++;\r\n      }\r\n      if (cells[row + 1][col + 1] >= 1) {\r\n        neighbors++;\r\n      }\r\n      // apply the rules to this cell\r\n      if (cells[row][col] >= 1) {\r\n        if (neighbors < 2 || neighbors > 3) {\r\n          // this cell dies of loneliness or overcrowding\r\n          return 0;\r\n        } else {\r\n          // this cell continues to live and grow older\r\n          return cells[row][col] + 1;\r\n        }\r\n      } else if (neighbors === 3) {\r\n        // this cell was dead but now is born\r\n        return 1;\r\n      }\r\n    } else {\r\n      // this cell dies - all perimeter cells are kept dead\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // Loop through cells array and apply Conway's rules to each cell\r\n  function calcNextGen() {\r\n    const nextGenCells = [];\r\n    if (cells.length === yCellCount) {\r\n      for (let y = 0; y < yCellCount; y++) {\r\n        let row = [];\r\n        for (let x = 0; x < xCellCount; x++) {\r\n          row.push(isAlive(y, x));\r\n        }\r\n        nextGenCells.push(row);\r\n      }\r\n      setCells(nextGenCells);\r\n      setIteration(iteration + 1);\r\n    }\r\n  }\r\n\r\n  // When a cell is clicked, toggle on/off, then update cells array\r\n  function handleCellClick(y, x) {\r\n    const newCell = cells[y][x] > 0 ? 0 : 1;\r\n    console.log(\"cell=\", newCell);\r\n    setCells((prevCells) => {\r\n      const cells = [...prevCells];\r\n      cells[y] = [...cells[y]];\r\n      cells[y][x] = newCell;\r\n      return cells;\r\n    });\r\n  }\r\n\r\n  // Create a table to display the current state of the cells array\r\n  function makeTable() {\r\n    let tblBoard = [];\r\n    let key = 0;\r\n    // make sure the cells array is ready\r\n    if (cells.length === yCellCount) {\r\n      for (let y = 1; y < yCellCount - 1; y++) {\r\n        let row = [];\r\n        for (let x = 1; x < xCellCount - 1; x++) {\r\n          ++key;\r\n          // create a cell with the proper css background color\r\n          let classes = \"cell\";\r\n          const count = cells[y][x];\r\n          if (isColor && count < 7) {\r\n            classes += \" cell-\" + count;\r\n          } else if (isColor && count >= 7) {\r\n            classes += \" cell-7\";\r\n          } else if (count === 0) {\r\n            classes += \" cell-0\";\r\n          } else if (count >= 1) {\r\n            classes += \" cell-1\";\r\n          }\r\n          // add the clickable cell to the row array\r\n          row.push(\r\n            <td\r\n              key={key}\r\n              className={classes}\r\n              onClick={() => handleCellClick(y, x)}\r\n            />\r\n          );\r\n        }\r\n        // add the row to the table array\r\n        tblBoard.push(<tr key={y}>{row}</tr>);\r\n      }\r\n    }\r\n    return (\r\n      <table className=\"board\">\r\n        <tbody>{tblBoard}</tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"wrapper\">\r\n        {isLoading ? <div> Loading results...</div> : makeTable()}\r\n\r\n        <div className=\"life-controls\">\r\n          <button\r\n            onClick={() =>\r\n              isRunning ? setIsRunning(false) : setIsRunning(true)\r\n            }\r\n          >\r\n            {isRunning ? \"Pause\" : \"Run\"}\r\n          </button>\r\n          <button onClick={() => calcNextGen()}>Next</button>\r\n          <button\r\n            onClick={() => (isColor ? setIsColor(false) : setIsColor(true))}\r\n          >\r\n            {isColor ? \"B/W\" : \"Color\"}\r\n          </button>\r\n          <button onClick={() => setDelay(4000)}>Slow</button>\r\n          <button onClick={() => setDelay(1000)}>Medium</button>\r\n          <button onClick={() => setDelay(200)}>Fast</button>\r\n          <button onClick={() => getClearBoard()}>Clear</button>\r\n          <button onClick={() => getRandomBoard()}>Random</button>\r\n          <button onClick={() => getLocalBoard(0)}>Load-0</button>\r\n          <button onClick={() => saveLocalBoard(0)}>Save-0</button>\r\n          <button onClick={() => getLocalBoard(1)}>Load-1</button>\r\n          <button onClick={() => saveLocalBoard(1)}>Save-1</button>\r\n          <button onClick={() => getLocalBoard(2)}>Load-2</button>\r\n          <button onClick={() => saveLocalBoard(2)}>Save-2</button>\r\n          <label>\r\n            Iteration: {iteration}, Slot: {isRandom ? \"Random\" : currentSlot},\r\n            MaxIterations: {maxIterations}\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n// ***** End Main function ***************************************************\r\n","export default function Footer() {\r\n  return (\r\n    <>\r\n      <footer>v1life by John Phillips 2021</footer>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Footer from \"./Footer\";\r\n\r\n// add import/export and set colors\r\nexport default function Config(props) {\r\n  const [maxIterations, setMaxIterations] = useState();\r\n  let { xCellCount = 90, yCellCount = 50 } = props; // size of cells array\r\n  let [cells, setCells] = useState([]); // 2d cells array\r\n  useEffect(() => {\r\n    const fetchMaxIterations = async () => {\r\n      const result = await JSON.parse(\r\n        window.localStorage.getItem(\"v1-life-max-iterations\")\r\n      );\r\n      setMaxIterations(result);\r\n    };\r\n    fetchMaxIterations();\r\n    console.log(\"max=\", maxIterations);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  function localSaveMaxIterations(iterations) {\r\n    setMaxIterations(iterations);\r\n    const filename = \"v1-life-max-iterations\";\r\n    window.localStorage.setItem(filename, JSON.stringify(iterations));\r\n    console.log(\"local save max=\", iterations);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchLocalData = () => {\r\n      const filename = \"v1life0\";\r\n      const data = JSON.parse(window.localStorage.getItem(filename));\r\n      setCells(data);\r\n    };\r\n    fetchLocalData();\r\n    console.log(\"json:\", JSON.stringify(cells));\r\n  }, []);\r\n\r\n  const [maxIt, handleChange, reset] = useInputState(maxIterations);\r\n  let j = JSON.stringify(cells);\r\n  return (\r\n    <>\r\n      <section>\r\n        <h3 id=\"config\">Config</h3>\r\n        <p>Conway's Game of Life by John Phillips on April 19, 2021.</p>\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <p>Current Max Iterations = {maxIterations}</p>\r\n        <form\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            localSaveMaxIterations(maxIt);\r\n            reset();\r\n          }}\r\n        >\r\n          <input\r\n            name=\"maxIt\"\r\n            type=\"number\"\r\n            placeholder=\"Max Iterations value\"\r\n            value={maxIt || \"\"}\r\n            onChange={handleChange}\r\n            required={true}\r\n            autoComplete=\"off\"\r\n          />\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </section>\r\n\r\n      <hr />\r\n      <section>\r\n        set the color palette\r\n        <ul style={{ listStyleType: \"none\" }}>\r\n          <li>\r\n            color-0: <input></input>\r\n          </li>\r\n          <li>\r\n            color-1: <input></input>\r\n          </li>\r\n          <li>\r\n            color-2: <input></input>\r\n          </li>\r\n          <li>\r\n            color-3: <input></input>\r\n          </li>\r\n          <li>\r\n            color-4: <input></input>\r\n          </li>\r\n          <li>\r\n            color-5: <input></input>\r\n          </li>\r\n          <li>\r\n            color-6: <input></input>\r\n          </li>\r\n          <li>\r\n            color-7: <input></input>\r\n          </li>\r\n          <li>\r\n            color-8: <input></input>\r\n          </li>\r\n        </ul>\r\n        <button type=\"submit\">Submit</button>\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <p>Current board: board-0</p>\r\n        <p>\r\n          Import: <button>board-0</button> <button>board-1</button>{\" \"}\r\n          <button>board-2</button>\r\n        </p>\r\n\r\n        <textarea rows=\"20\" cols=\"185\" value={j}></textarea>\r\n        <p>Save as: {\" \"}\r\n          <button type=\"submit\">board-0</button>{\" \"}\r\n          <button type=\"submit\">board-1</button>{\" \"}\r\n          <button type=\"submit\">board-2</button>\r\n        </p>\r\n      </section>\r\n      <hr />\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\n// Utility functions to fill in a text field as the user types;\r\n// resets the text field to initialVal after the user presses enter\r\nfunction useInputState(initialVal) {\r\n  const [value, setValue] = useState(initialVal);\r\n  const handleChange = (e) => setValue(e.target.value);\r\n  const reset = () => setValue(\"\");\r\n  return [value, handleChange, reset];\r\n}\r\n","import Footer from \"./Footer\";\r\nexport default function Help() {\r\n  return (\r\n    <>\r\n      <section>\r\n        <h3>Controls</h3>\r\n        <p>This app implements Conway's game of life rules.</p>\r\n        <p>\r\n          The control buttons are at the bottom of the screen. You may need to\r\n          scroll down to see them.\r\n        </p>\r\n        <p>\r\n          Pause [Run], Next - toggle between running and pausing the simulation;\r\n          when paused you can click the next button to move forward frame by\r\n          frame.\r\n        </p>\r\n        <p>\r\n          B/W [Color] - choose black and white or color cells. The color changes\r\n          based on how long the cell has been alive.\r\n        </p>\r\n        <p>\r\n          Slow, Medium, Fast - sets the simulation speed. Medium is about 1\r\n          frame per second.\r\n        </p>\r\n        <p>\r\n          Random, Clear - set a randome screen of cells or set all of the cells\r\n          to 0.\r\n        </p>\r\n        <p>\r\n          Load, Save - load and save the screens from/to 3 local storage slots.\r\n        </p>\r\n      </section>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n","import Footer from \"./Footer\";\r\nexport default function About() {\r\n  return (\r\n    <>\r\n      <section>\r\n        <h3 id=\"about\">About</h3>\r\n        <p>Conway's Game of Life by John Phillips on April 17, 2021.</p>\r\n        <p>\r\n          Source:{\" \"}\r\n          <a href=\"https://github.com/profphillips/life-v1\">\r\n            https://github.com/profphillips/life-v1\r\n          </a>\r\n        </p>\r\n        <p>\r\n          Live page:{\" \"}\r\n          <a href=\"https://profphillips.github.io/life-v1/\">\r\n            https://profphillips.github.io/life-v1/\r\n          </a>\r\n        </p>\r\n      </section>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n","// by John Phillips on 2021-04-17 revised 2021-04-17\r\n\r\n// This file contains the navbar and routing for the app.\r\n\r\nimport React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  NavLink,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport Config from \"./Config\";\r\nimport Help from \"./Help\";\r\nimport About from \"./About\";\r\nimport \"./AppNav.css\";\r\n\r\nexport default function AppNav() {\r\n  return (\r\n    <Router>\r\n      <ul className=\"navbar\">\r\n        <li className=\"nav-item\">\r\n          <NavLink className=\"nav-link\" activeClassName=\"nav-active\" to=\"/home\">\r\n            Home\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <NavLink className=\"nav-link\" activeClassName=\"nav-active\" to=\"/config\">\r\n            Config\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <NavLink className=\"nav-link\" activeClassName=\"nav-active\" to=\"/help\">\r\n            Help\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <NavLink\r\n            className=\"nav-link\"\r\n            activeClassName=\"nav-active\"\r\n            to=\"/about\"\r\n          >\r\n            About\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n      <Switch>\r\n        <Route exact path=\"/help\">\r\n          <Help />\r\n        </Route>\r\n        <Route exact path=\"/config\">\r\n          <Config />\r\n        </Route>\r\n        <Route exact path=\"/about\">\r\n          <About />\r\n        </Route>\r\n        <Route exact path=\"/home\">\r\n          <Home />\r\n        </Route>\r\n        <Route exact path=\"/life-v1\">\r\n          <Redirect to=\"/home\" />\r\n        </Route>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/home\" />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport AppNav from \"./AppNav\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppNav />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}